/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package checkersserver;

import board.Board;
import com.esotericsoftware.kryo.Kryo;
import com.esotericsoftware.kryonet.Connection;
import com.esotericsoftware.kryonet.Listener;
import com.esotericsoftware.kryonet.Server;
import game.StartGame;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import server.GameMessage;
import server.GameServer;
import static server.GameServer.MAIN_PORT;
import server.Registration;

/**
 *
 * @author user
 */
public class ServerFrame extends javax.swing.JFrame {

    Server server;
    boolean client1Registered = false;
    /**
     * Creates new form ServerFrame
     */
    public ServerFrame() {
        initComponents();
        server = new Server();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListClients = new javax.swing.JList<>();
        jTextFieldStatus = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Start server");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Stop server");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jListClients.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(jListClients);

        jTextFieldStatus.setEditable(false);
        jTextFieldStatus.setText("Server not yet started");

        jLabel1.setText("Connected players");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldStatus, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jTextFieldStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void start() throws IOException{
        Board board = new Board();
        char firstTurn = Board.MAN_X;
        server = new Server()/*{
            /*@Override
            protected Connection newConnection(){
                System.out.println("New connection");
                GameServer.NewConnection conn = new GameServer.NewConnection();
                Registration r = new Registration();
                r.board = board;
                r.turn = firstTurn;
                //conn.sendTCP(r);
                return conn;
            }
        }*/;
        Kryo kryo = server.getKryo();
        kryo.register(Board.class);
        kryo.register(server.Registration.class);
        kryo.register(char[][].class);
        kryo.register(char[].class);
        kryo.register(int[][].class);
        kryo.register(server.GameMessage.class);
        kryo.register(game.StartGame.class);
        server.start();
        server.bind(MAIN_PORT);
        server.addListener(new Listener(){
            
            @Override
            public void disconnected(Connection connection){
                jTextFieldStatus.setText("A player has disconnected");
                if (server.getConnections().length <= 0){
                    //System.exit(0);
                    JOptionPane.showMessageDialog(ServerFrame.this, "Both players have "
                            + "disconnected.", "No players", JOptionPane.INFORMATION_MESSAGE);
                    client1Registered = false;
                }
            }
            
            @Override
            public void received(Connection connection, Object object){
                //System.out.println("Received something: ");
                if (object instanceof GameMessage){
                    System.out.println("Turns out this something is a board");
                    for (Connection conn: server.getConnections()){
                        conn.sendTCP(object);
                    }
                }
                else if (object instanceof Registration){
                    //System.out.println("A client is trying to register with the server...");
                    DefaultListModel model = new DefaultListModel();
                    for (int i = 0; i < jListClients.getModel().getSize(); i++){
                        model.addElement(jListClients.getModel().getElementAt(i));
                    }
                    model.addElement(connection.getRemoteAddressTCP().getHostName() + " connected");
                    jListClients.setModel(model);
                    Registration r = new Registration();
                    r.board = board;
                    if (!client1Registered){
                        r.turn = firstTurn;
                        client1Registered = true;
                    }
                    else{
                        r.turn = Board.MAN_Y;
                    }
                    connection.sendTCP(r);
                    if (server.getConnections().length >= 2){
                        StartGame st = new StartGame();
                        st.startGame = "START";
                        server.sendToAllTCP(st);
                        System.out.println("Sent start game message");
                    }
                }
                else{
                    //System.out.println("An unknown error occured.");
                    //System.out.println(object.getClass());
                }
            }
        });
    }
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            start();
            jTextFieldStatus.setText("Server up and running");
        } catch (IOException ex) {
            Logger.getLogger(ServerFrame.class.getName()).log(Level.SEVERE, null, ex);
            jTextFieldStatus.setText("An error occurred.");
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        server.stop();
        client1Registered = false;
        jTextFieldStatus.setText("Server stopped!");
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ServerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ServerFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList<String> jListClients;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextFieldStatus;
    // End of variables declaration//GEN-END:variables
}
